#!/bin/bash

# This file is part of hey.
#
# hey is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# hey is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with hey.  If not, see <https://www.gnu.org/licenses/>.
#
# For further information about hey you can visit
# https://cdelord.fr/hey

PREFIX=~/.local
TARGET=

CACHE=~/.local/var/cache/hey
REPOS=$CACHE/repos
TAGS=$CACHE/tags

cmd-help()
{
    cat <<EOF
usage: hey options command arguments

Options:
    -p prefix   installation prefix (~/.local by default)
    -t target   LuaX target (cross-compilation)

Commands:
    help        prints this help message
    list        list available packets
    install     install a packet
    clean       clean cache

install arguments:
    packages    package names to install
                (see list)

EOF
}

cmd-list()
{
    cat <<EOF
all     install all packets

======== CDSoft softwares =====================================================
bang    Ninja file generator scriptable in LuaX
calculadoira
        simple yet powerful calculator
lsvg    LuaX interpreter specialized to generate SVG images
luax    Lua eXtended, a Lua interpreter with a better REPL and useful libraries
panda   Pandoc Lua filter that works on internal Pandocâ€™s AST
tagref  Maintain cross-references in your code
ypp     Yet another preprocessor, scriptable in LuaX

======== Other softwares ======================================================
ditaa   DIagrams Through Ascii Art
pandoc  Swiss-army knife to convert from and to a bunch of document formats
pandoc-latex-template
        Clean pandoc LaTeX template to convert your markdown files to PDF or LaTeX
pandoc-panam-css
        Pan Am: Simple CSS for Pandoc
plantuml
        PlantUML
typst   Focus on your text and let Typst take care of layout and formatting
EOF
}

cmd-clean()
{
    if [ -z "$1" ]
    then
        rm -rf "$CACHE"
    else
        while [ -n "$1" ]
        do
            rm -rf "${REPOS:?}/$1"
            shift
        done
    fi
}

check-prerequisites()
{
    check   figlet      figlet          figlet          false
    check   git         git             git             true
    check   curl        curl            curl            true
    check   jq          jq              jq              true
    check   wget        wget            wget            true
    check   tar         tar             tar             true
    check   unzip       zip             zip             true
    check   ninja       ninja-build     ninja-build     true
}

check()
{
    local name="$1"
    local rpm_packet="$2"
    local apt_packet="$3"
    local required="$4"
    hash "$name" && return
    hash dnf 2>/dev/null && sudo dnf install "$rpm_packet" && return
    hash apt 2>/dev/null && sudo apt install "$apt_packet" && return
    if $required
    then
        echo "hey requires $name"
        exit 1
    fi
}

cmd-install()
{
    for package in "$@"
    do
        case "$package" in
            (all)                       install-all ;;
            (bang)                      install-bang ;;
            (calculadoira)              install-calculadoira ;;
            (ditaa)                     install-ditaa ;;
            (luax)                      install-luax ;;
            (lsvg)                      install-lsvg ;;
            (panda)                     install-panda ;;
            (pandoc)                    install-pandoc ;;
            (pandoc-latex-template)     install-pandoc-latex-template ;;
            (pandoc-panam-css)          install-pandoc-panam-css ;;
            (plantuml)                  install-plantuml ;;
            (tagref)                    install-tagref ;;
            (typst)                     install-typst ;;
            (ypp)                       install-ypp ;;
            (*) echo "$package: unknown installation method"; exit 1 ;;
        esac
    done
}

gitclone()
{
    local url="$1"
    local branch="$2"
    local dir
    dir=$(basename "$url")
    mkdir -p $REPOS
    if [ -d "$REPOS/$dir" ]
    then
        ( cd "$REPOS/$dir" && git fetch origin && git reset --hard origin/master && git rebase )
    else
        git clone -b "${branch:-master}" "$url" "$REPOS/$dir"
    fi
}

target()
{
    case "$TARGET" in
        ("")    [ -x $REPOS/luax/.build/bin/luax ] || compile-luax
                $REPOS/luax/.build/bin/luax -e 'print(sys.os.."-"..sys.arch)'
                ;;
        (linux-x86_64*)    echo "linux-x86_64" ;;
        (linux-aarch64*)   echo "linux-aarch64" ;;
        (windows-x86_64*)  echo "windows-x86_64" ;;
        (macos-x86_64*)    echo "macos-x86_64" ;;
        (macos-aarch64*)   echo "macos-aarch64" ;;
        (*)     echo "$TARGET" # the caller shall report an error
                ;;
    esac
}

tag_name()
{
    local repo="$1"
    local request="https://api.github.com/repos/$repo/releases/latest"
    local tag_file
    tag_file="$TAGS/$(basename "$repo")"
    mkdir -p "$TAGS"
    local age=$(( $(date +%s) - $(stat -c %Y -- "$tag_file" 2>/dev/null || echo 0) ))
    if [ "$age" -gt 7200 ]
    then
        curl -sSL "$request" | jq -r .tag_name > "$tag_file"
        touch "$tag_file"
    fi
    cat "$tag_file"
}

title()
{
    figlet -t "$*"
}

declare -A ALREADY_INSTALLED=()

once()
{
    if [ -z "${ALREADY_INSTALLED["$1"]}" ]
    then
        ALREADY_INSTALLED["$1"]=true
        true
    else
        false
    fi
}

install-all()
{
    # shellcheck disable=SC2046
    cmd-install $(
        grep "^install-.*()$" "$0" |
            grep -v "^install-all()$" |
            sed 's/^install-//' |
            tr -d '()'
    )
}

install-bang()
{
    once bang || return
    compile-luax
    title Bang
    gitclone https://github.com/CDSoft/bang
    ninja clean -C $REPOS/bang
    PREFIX=$PREFIX ninja install -C $REPOS/bang
}

install-calculadoira()
{
    once calculadoira || return
    compile-luax
    title Calculadoira
    gitclone https://github.com/CDSoft/calculadoira
    ninja clean -C $REPOS/calculadoira
    PREFIX=$PREFIX ninja install -C $REPOS/calculadoira
}

install-ditaa()
{
    once ditaa || return
    title ditaa
    local DITAA_VERSION
    DITAA_VERSION=$(tag_name stathissideris/ditaa)
    mkdir -p $REPOS/ditaa $PREFIX/bin
    [ -f "$REPOS/ditaa/ditaa-${DITAA_VERSION#v}-standalone.jar" ] \
        || wget "https://github.com/stathissideris/ditaa/releases/download/${DITAA_VERSION}/ditaa-${DITAA_VERSION#v}-standalone.jar" \
            -O "$REPOS/ditaa/ditaa-${DITAA_VERSION#v}-standalone.jar"
    cp -v "$REPOS/ditaa/ditaa-${DITAA_VERSION#v}-standalone.jar" $PREFIX/bin/ditaa.jar
}

install-lsvg()
{
    once lsvg || return
    compile-luax
    title lsvg
    gitclone https://github.com/CDSoft/lsvg
    ninja clean -C $REPOS/lsvg
    PREFIX=$PREFIX ninja install -C $REPOS/lsvg
}

compile-luax()
{
    once compile-luax || return
    title "LuaX compilation"
    gitclone https://github.com/CDSoft/luax
    ( cd $REPOS/luax && ./bootstrap.sh )
    ninja compile -C $REPOS/luax
    eval "$($REPOS/luax/.build/bin/luax env)"
}

install-luax()
{
    compile-luax
    once luax || return
    title LuaX
    if [ -n "$TARGET" ]
    then
        luaxc install -t "$TARGET" -p $PREFIX
    else
        luaxc install -p $PREFIX
    fi
    install -v -t $PREFIX/bin $REPOS/luax/.build/bin/luaxc
}

install-panda()
{
    once panda || return
    compile-luax
    install-pandoc-latex-template
    install-pandoc-panam-css
    title Panda
    gitclone https://github.com/CDSoft/panda
    ninja clean -C $REPOS/panda
    PREFIX=$PREFIX ninja install -C $REPOS/panda
}

install-pandoc()
{
    once pandoc || return
    title Pandoc
    mkdir -p "$REPOS/pandoc/$TARGET" "$PREFIX/bin"
    local PANDOC_VERSION
    PANDOC_VERSION=$(tag_name jgm/pandoc)
    case "$(target)" in
        (linux-x86_64)
            local PANDOC_URL=https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-linux-amd64.tar.gz
            [ -f "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")" ] || wget -c "$PANDOC_URL" -O "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")"
            tar -C "$REPOS/pandoc/$TARGET/" -xzf "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")"
            cp -av "$REPOS/pandoc/$TARGET/pandoc-${PANDOC_VERSION}/bin"/* "$PREFIX/bin/"
            ;;
        (linux-aarch64)
            local PANDOC_URL=https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-linux-arm64.tar.gz
            [ -f "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")" ] || wget -c "$PANDOC_URL" -O "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")"
            tar -C "$REPOS/pandoc/$TARGET/" -xzf "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")"
            cp -av "$REPOS/pandoc/$TARGET/pandoc-${PANDOC_VERSION}/bin"/* "$PREFIX/bin/"
            ;;
        (windows-x86_64)
            local PANDOC_URL=https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-windows-x86_64.zip
            [ -f "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")" ] || wget -c "$PANDOC_URL" -O "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")"
            unzip -o -q "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")" -d "$REPOS/pandoc/$TARGET/"
            cp -av "$REPOS/pandoc/$TARGET/pandoc-${PANDOC_VERSION}"/*.exe "$PREFIX/bin/"
            ;;
        (macos-x86_64)
            local PANDOC_URL=https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-x86_64-macOS.zip
            [ -f "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")" ] || wget -c "$PANDOC_URL" -O "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")"
            unzip -o -q "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")" -d "$REPOS/pandoc/$TARGET/"
            cp -av "$REPOS/pandoc/$TARGET/pandoc-${PANDOC_VERSION}-x86_64/bin"/* "$PREFIX/bin/"
            ;;
        (macos-aarch64)
            local PANDOC_URL=https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-arm64-macOS.zip
            [ -f "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")" ] || wget -c "$PANDOC_URL" -O "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")"
            unzip -o -q "$REPOS/pandoc/$TARGET/$(basename "$PANDOC_URL")" -d "$REPOS/pandoc/$TARGET/"
            cp -av "$REPOS/pandoc/$TARGET/pandoc-${PANDOC_VERSION}-arm64/bin"/* "$PREFIX/bin/"
            ;;
        (*) echo "$(target): unsupported platform for Pandoc"; exit 1 ;;
    esac
}

install-pandoc-latex-template()
{
    once pandoc-latex-template || return
    title Pandoc LaTeX template
    gitclone https://github.com/Wandmalfarbe/pandoc-latex-template.git
    mkdir -p $PREFIX/share/pandoc
    cp -v $REPOS/pandoc-latex-template.git/eisvogel.tex $PREFIX/share/pandoc
}

install-pandoc-panam-css()
{
    once pandoc-panam-css || return
    title Pandoc Pan-Am CSS
    gitclone https://github.com/CDSoft/pan-am
    mkdir -p $PREFIX/share/pandoc
    cp -v $REPOS/pan-am/styling.css $PREFIX/share/pandoc/panam.css
}

install-plantuml()
{
    once plantuml || return
    title PlantUML
    local PLANTUML_VERSION
    PLANTUML_VERSION=$(tag_name plantuml/plantuml)
    mkdir -p $REPOS/plantuml $PREFIX/bin
    [ -f "$REPOS/plantuml/plantuml-pdf-${PLANTUML_VERSION#v}.jar" ] \
        || wget "https://github.com/plantuml/plantuml/releases/download/${PLANTUML_VERSION}/plantuml-pdf-${PLANTUML_VERSION#v}.jar" \
            -O "$REPOS/plantuml/plantuml-pdf-${PLANTUML_VERSION#v}.jar"
    cp -v "$REPOS/plantuml/plantuml-pdf-${PLANTUML_VERSION#v}.jar" $PREFIX/bin/plantuml.jar
}

install-tagref()
{
    once tagref || return
    compile-luax
    title tagref
    gitclone https://github.com/CDSoft/tagref
    ninja clean -C $REPOS/tagref
    PREFIX=$PREFIX ninja install -C $REPOS/tagref
}

install-typst()
{
    once typst || return
    title Typst
    local TYPST_VERSION
    TYPST_VERSION=$(tag_name typst/typst)
    mkdir -p "$REPOS/typst/$TARGET/$TYPST_VERSION" "$PREFIX/bin"
    case "$(target)" in
        (linux-x86_64)
            TYPST_URL=https://github.com/typst/typst/releases/download/${TYPST_VERSION}/typst-x86_64-unknown-linux-musl.tar.xz
            [ -f "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")" ] || wget -c "$TYPST_URL" -O "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")"
            tar -C "$REPOS/typst/$TARGET/$TYPST_VERSION" -xJf "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")"
            cp -av "$REPOS/typst/$TARGET/$TYPST_VERSION/typst-x86_64-unknown-linux-musl/typst" "$PREFIX/bin/"
            ;;
        (linux-aarch64)
            TYPST_URL=https://github.com/typst/typst/releases/download/${TYPST_VERSION}/typst-aarch64-unknown-linux-musl.tar.xz
            [ -f "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")" ] || wget -c "$TYPST_URL" -O "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")"
            tar -C "$REPOS/typst/$TARGET/$TYPST_VERSION" -xJf "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")"
            cp -av "$REPOS/typst/$TARGET/$TYPST_VERSION/typst-aarch64-unknown-linux-musl/typst" "$PREFIX/bin/"
            ;;
        (windows-x86_64)
            TYPST_URL=https://github.com/typst/typst/releases/download/${TYPST_VERSION}/typst-x86_64-pc-windows-msvc.zip
            [ -f "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")" ] || wget -c "$TYPST_URL" -O "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")"
            unzip -o -q "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")" -d "$REPOS/typst/$TARGET/$TYPST_VERSION/"
            cp -av "$REPOS/typst/$TARGET/$TYPST_VERSION/typst-x86_64-pc-windows-msvc/typst.exe" "$PREFIX/bin/"
            ;;
        (macos-x86_64)
            TYPST_URL=https://github.com/typst/typst/releases/download/${TYPST_VERSION}/typst-x86_64-apple-darwin.tar.xz
            [ -f "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")" ] || wget -c "$TYPST_URL" -O "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")"
            tar -C "$REPOS/typst/$TARGET/$TYPST_VERSION" -xJf "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")"
            cp -av "$REPOS/typst/$TARGET/$TYPST_VERSION/typst-x86_64-apple-darwin/typst" "$PREFIX/bin/"
            ;;
        (macos-aarch64)
            TYPST_URL=https://github.com/typst/typst/releases/download/${TYPST_VERSION}/typst-aarch64-apple-darwin.tar.xz
            [ -f "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")" ] || wget -c "$TYPST_URL" -O "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")"
            tar -C "$REPOS/typst/$TARGET/$TYPST_VERSION" -xJf "$REPOS/typst/$TARGET/$TYPST_VERSION/$(basename "$TYPST_URL")"
            cp -av "$REPOS/typst/$TARGET/$TYPST_VERSION/typst-aarch64-apple-darwin/typst" "$PREFIX/bin/"
            ;;
        (*) echo "$(target): unsupported platform for Typst"; exit 1 ;;
    esac
}

install-ypp()
{
    once ypp || return
    compile-luax
    title ypp
    gitclone https://github.com/CDSoft/ypp
    ninja clean -C $REPOS/ypp
    PREFIX=$PREFIX ninja install -C $REPOS/ypp
}

main()
{
    local args=()

    while [ -n "$1" ]
    do
        case "$1" in
            (-p)    PREFIX="$2"; shift 2;;
            (-t)    TARGET="$2"; shift 2;;
            (-*)    echo "$1: unknown option"; exit 1 ;;
            (*)     args+=("$1"); shift 1 ;;
        esac
    done

    PREFIX=$(realpath "$PREFIX")

    local cmd="${args[0]}"
    unset "args[0]"
    #set -x
    case "$cmd" in
        (""|help) cmd-help ;;
        (list)    cmd-list ;;
        (clean)   cmd-clean "${args[@]}" ;;
        (install) echo "Installation prefix: $PREFIX"
                  check-prerequisites
                  cmd-install "${args[@]}"
                  ;;
        (*)       echo "$cmd: unknown command"; exit 1 ;;
    esac
    set +x
}

main "$@"
